// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String?
  nombre        String
  rol           String    // 'Admin' | 'Supervisor' | 'Tecnico' | 'Ayudante'
  activo        Boolean   @default(true)
  ultimoAcceso  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relaciones
  avances       Avance[]
  mediciones    Medicion[]
  
  @@map("usuarios")
}

model Avance {
  id            String    @id @default(uuid())
  obraId        String    @default("los-encinos-001")
  fecha         DateTime
  torre         String    // A, B, C, D, E, F, G, H, I, J
  piso          Int?      // 1, 3
  sector        String?   // Norte, Poniente, Oriente
  tipoEspacio   String    // unidad, sotu, shaft, lateral, antena
  ubicacion     String    // Identificador específico (ej: "A101", "SOTU-A1")
  categoria     String    // Categoría de avance
  porcentaje    Int       // 0-100
  fotoPath      String?   // Ruta local de la foto
  fotoUrl       String?   // URL en Supabase Storage
  observaciones String?
  usuarioId     String
  syncStatus    String    @default("local") // local, syncing, synced, conflict
  lastSync      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  
  // Relaciones
  usuario       Usuario   @relation(fields: [usuarioId], references: [id])
  
  @@index([torre, piso])
  @@index([fecha])
  @@index([ubicacion])
  @@map("avances")
}

model Medicion {
  id            String    @id @default(uuid())
  obraId        String    @default("los-encinos-001")
  fecha         DateTime
  torre         String
  piso          Int
  identificador String    // Unidad específica
  tipoMedicion  String    // alambrico-t1, alambrico-t2, coaxial, fibra, wifi, certificacion
  valores       String    // JSON string con los valores
  estado        String    // OK, ADVERTENCIA, FALLA
  usuarioId     String
  observaciones String?
  syncStatus    String    @default("local") // local, synced
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relaciones
  usuario       Usuario   @relation(fields: [usuarioId], references: [id])
  
  @@index([torre, piso])
  @@index([fecha])
  @@map("mediciones")
}

model SyncQueue {
  id          String    @id @default(uuid())
  type        String    // avance, medicion, foto
  action      String    // create, update, delete
  itemId      String    // ID del item a sincronizar
  data        String    // JSON string con los datos
  attempts    Int       @default(0)
  lastAttempt DateTime?
  error       String?
  status      String    @default("pending") // pending, processing, completed, failed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("sync_queue")
}

model AppConfig {
  id        String   @id @default("app-config")
  lastSync  DateTime?
  isOnline  Boolean  @default(false)
  settings  String   // JSON string con configuraciones
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("app_config")
}