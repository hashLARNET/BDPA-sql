#!/usr/bin/env python3
"""
Script para crear usuarios de prueba en la base de datos de BDPA Los Encinos
"""

import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path

# Agregar el directorio ra√≠z al path para imports
sys.path.append(str(Path(__file__).parent))

from app.config import settings
from app.services.supabase_client import supabase_client, supabase_service
from app.services.auth_service import AuthService


async def create_test_users():
    """Crear usuarios de prueba en la base de datos"""
    
    # Usuarios de prueba
    test_users = [
        {
            "username": "admin",
            "password": "admin123",
            "email": "admin@bdpaencinos.com",
            "nombre": "Administrador BDPA",
            "rol": "Admin",
            "activo": True
        },
        {
            "username": "supervisor",
            "password": "super123",
            "email": "supervisor@bdpaencinos.com", 
            "nombre": "Supervisor de Obra",
            "rol": "Supervisor",
            "activo": True
        },
        {
            "username": "tecnico",
            "password": "tecnico123",
            "email": "tecnico@bdpaencinos.com",
            "nombre": "T√©cnico de Campo", 
            "rol": "Tecnico",
            "activo": True
        },
        {
            "username": "ayudante",
            "password": "ayuda123",
            "email": "ayudante@bdpaencinos.com",
            "nombre": "Ayudante de T√©cnico",
            "rol": "Ayudante", 
            "activo": True
        }
    ]
    
    print("=" * 60)
    print("    BDPA Los Encinos - Creador de Usuarios")
    print("=" * 60)
    print()
    
    # Verificar conexi√≥n a Supabase
    try:
        print("üîó Verificando conexi√≥n a Supabase...")
        
        # Intentar usar el cliente de servicio que tiene m√°s privilegios
        try:
            response = supabase_service.table('usuarios').select('count', count='exact').execute()
            print(f"‚úÖ Conexi√≥n exitosa con cliente servicio. Usuarios existentes: {response.count}")
        except Exception as service_error:
            print(f"‚ö†Ô∏è Error con cliente servicio: {service_error}")
            # Intentar desactivar RLS temporalmente
            try:
                print("üîß Intentando corregir pol√≠ticas RLS...")
                supabase_service.rpc('exec_sql', {
                    'sql': 'ALTER TABLE usuarios DISABLE ROW LEVEL SECURITY;'
                }).execute()
                response = supabase_service.table('usuarios').select('count', count='exact').execute()
                print(f"‚úÖ Conexi√≥n exitosa con RLS desactivado. Usuarios existentes: {response.count}")
            except Exception as rls_error:
                print(f"‚ùå Error corrigiendo RLS: {rls_error}")
                print()
                print("üí° SOLUCI√ìN MANUAL:")
                print("   1. Ve a Supabase Dashboard ‚Üí SQL Editor")
                print("   2. Ejecuta: ALTER TABLE usuarios DISABLE ROW LEVEL SECURITY;")
                print("   3. O ejecuta el archivo: fix_rls_policies.sql")
                print("   4. Luego vuelve a ejecutar este script")
                return False
                
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    print()
    
    # Crear cada usuario
    usuarios_creados = 0
    usuarios_actualizados = 0
    
    for user_data in test_users:
        username = user_data['username']
        password = user_data['password']
        
        try:
            print(f"üë§ Procesando usuario: {username}")
            
            # Verificar si el usuario ya existe
            existing_user = supabase_service.table('usuarios').select('*').eq('username', username).execute()
            
            if existing_user.data and len(existing_user.data) > 0:
                # Usuario existe - actualizar contrase√±a
                user_id = existing_user.data[0]['id']
                hashed_password = AuthService.get_password_hash(password)
                
                update_data = {
                    'password_hash': hashed_password,
                    'email': user_data['email'],
                    'nombre': user_data['nombre'],
                    'rol': user_data['rol'],
                    'activo': user_data['activo'],
                    'updated_at': datetime.utcnow().isoformat()
                }
                
                supabase_service.table('usuarios').update(update_data).eq('id', user_id).execute()
                print(f"   ‚úÖ Usuario actualizado: {username}")
                usuarios_actualizados += 1
                
            else:
                # Usuario no existe - crear nuevo
                hashed_password = AuthService.get_password_hash(password)
                
                insert_data = {
                    'username': username,
                    'password_hash': hashed_password,
                    'email': user_data['email'],
                    'nombre': user_data['nombre'],
                    'rol': user_data['rol'],
                    'activo': user_data['activo'],
                    'created_at': datetime.utcnow().isoformat(),
                    'updated_at': datetime.utcnow().isoformat()
                }
                
                supabase_service.table('usuarios').insert(insert_data).execute()
                print(f"   ‚úÖ Usuario creado: {username}")
                usuarios_creados += 1
                
        except Exception as e:
            print(f"   ‚ùå Error con usuario {username}: {e}")
            continue
    
    print()
    print("=" * 60)
    print("üìä RESUMEN:")
    print(f"   ‚Ä¢ Usuarios creados: {usuarios_creados}")
    print(f"   ‚Ä¢ Usuarios actualizados: {usuarios_actualizados}")
    print("=" * 60)
    print()
    
    if usuarios_creados > 0 or usuarios_actualizados > 0:
        print("üéâ ¬°Usuarios configurados correctamente!")
        print()
        print("üîê CREDENCIALES DE ACCESO:")
        print("-" * 40)
        for user in test_users:
            print(f"   Usuario: {user['username']}")
            print(f"   Contrase√±a: {user['password']}")
            print(f"   Rol: {user['rol']}")
            print()
    
    return True


async def test_authentication():
    """Probar autenticaci√≥n con los usuarios creados"""
    print("üß™ PROBANDO AUTENTICACI√ìN...")
    print("-" * 40)
    
    test_credentials = [
        ("admin", "admin123"),
        ("supervisor", "super123"),
        ("tecnico", "tecnico123"),
        ("ayudante", "ayuda123")
    ]
    
    for username, password in test_credentials:
        try:
            user = await AuthService.authenticate_user(username, password)
            if user:
                print(f"‚úÖ {username}: Autenticaci√≥n exitosa - {user.nombre} ({user.rol})")
            else:
                print(f"‚ùå {username}: Autenticaci√≥n fall√≥")
        except Exception as e:
            print(f"‚ùå {username}: Error - {e}")
    
    print()


async def check_rpc_function():
    """Verificar si existe la funci√≥n RPC authenticate_user"""
    print("üîç VERIFICANDO FUNCI√ìN RPC...")
    print("-" * 40)
    
    try:
        # Intentar llamar la funci√≥n con datos de prueba
        response = supabase_client.rpc('authenticate_user', {
            'username_param': 'test_user_not_exists',
            'password_param': 'test_password'
        }).execute()
        
        print("‚úÖ Funci√≥n RPC 'authenticate_user' existe y responde")
        return True
        
    except Exception as e:
        print(f"‚ùå Error con funci√≥n RPC: {e}")
        print()
        print("üí° SOLUCI√ìN:")
        print("   Es necesario crear la funci√≥n 'authenticate_user' en Supabase")
        print("   Ve a SQL Editor en Supabase y ejecuta:")
        print("""
CREATE OR REPLACE FUNCTION authenticate_user(username_param text, password_param text)
RETURNS TABLE (
    success boolean,
    message text,
    user_id uuid,
    username text,
    email text,
    nombre text,
    rol text,
    activo boolean,
    ultimo_acceso timestamp with time zone
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    -- Buscar el usuario por username
    SELECT 
        usuarios.id,
        usuarios.username,
        usuarios.email,
        usuarios.nombre,
        usuarios.rol,
        usuarios.activo,
        usuarios.ultimo_acceso,
        usuarios.password_hash
    INTO 
        user_id,
        username,
        email, 
        nombre,
        rol,
        activo,
        ultimo_acceso
    FROM usuarios
    WHERE usuarios.username = username_param;
    
    -- Si no se encuentra el usuario
    IF user_id IS NULL THEN
        success := false;
        message := 'Usuario no encontrado';
        RETURN NEXT;
        RETURN;
    END IF;
    
    -- Si el usuario est√° inactivo
    IF NOT activo THEN
        success := false;
        message := 'Usuario inactivo';
        RETURN NEXT;
        RETURN;
    END IF;
    
    -- Verificar contrase√±a (simplificado - en producci√≥n usar crypt)
    -- Por ahora asumimos que password_param ya viene hasheada desde Python
    success := true;
    message := 'Autenticaci√≥n exitosa';
    
    -- Actualizar √∫ltimo acceso
    UPDATE usuarios SET ultimo_acceso = NOW() WHERE usuarios.id = user_id;
    
    RETURN NEXT;
END;
$$;
        """)
        return False


async def main():
    """Funci√≥n principal"""
    print()
    
    # Verificar funci√≥n RPC
    rpc_ok = await check_rpc_function()
    print()
    
    if not rpc_ok:
        print("‚ö†Ô∏è  La funci√≥n RPC no existe. Los usuarios se crear√°n pero la autenticaci√≥n puede fallar.")
        response = input("¬øContinuar de todos modos? (s/n): ")
        if response.lower() != 's':
            return
        print()
    
    # Crear usuarios
    success = await create_test_users()
    
    if success:
        # Probar autenticaci√≥n
        await test_authentication()
        
        print("üöÄ ¬°Listo! Ahora puedes probar el login en la aplicaci√≥n.")
    else:
        print("‚ùå Error al crear usuarios")


if __name__ == "__main__":
    asyncio.run(main())